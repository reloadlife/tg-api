name: Build and Push Telegram Bot API

on:
  push:
    branches:
      - master
  schedule:
    - cron: "20 4 * * *"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: reloadlife/tg-api
  IMAGE_TAG: ghcr.io/reloadlife/tg-api
  ALPINE_VERSION: "3.20"

jobs:
  build-and-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/ppc64le

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api
          submodules: recursive

      - name: Get version
        run: |
          VERSION=$(cat telegram-bot-api/CMakeLists.txt | grep TelegramBotApi | cut -d " " -f3)
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.arch }}
          push: true
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.VERSION }}
            ${{ env.IMAGE_TAG }}:latest

  create-manifest:
    name: Create and push multi-arch Docker manifest
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          docker manifest create ${{ env.IMAGE_TAG }}:${{ env.VERSION }} \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-386 \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-amd64 \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-arm-v6 \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-arm-v7 \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-arm64 \
            --amend ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-linux-ppc64le
          docker manifest push ${{ env.IMAGE_TAG }}:${{ env.VERSION }}

          docker manifest create ${{ env.IMAGE_TAG }}:latest \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-386 \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-amd64 \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-arm-v6 \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-arm-v7 \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-arm64 \
            --amend ${{ env.IMAGE_TAG }}:latest-linux-ppc64le
          docker manifest push ${{ env.IMAGE_TAG }}:latest
